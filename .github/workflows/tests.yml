name: node tests

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

env:
  CI: true
  CYPRESS_INSTALL_BINARY: 0

jobs:
  # node:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [12.x]
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - name: Cache node modules
  #     uses: actions/cache@v1
  #     with:
  #       path: node_modules
  #       key: ${{ runner.OS }}-build-${{ hashFiles('yarn.lock') }}
  #       restore-keys: |
  #         ${{ runner.OS }}-build-${{ env.cache-name }}-
  #         ${{ runner.OS }}-build-
  #         ${{ runner.OS }}-
  #   - name: install
  #     run: |
  #       yarn --frozen-lockfile
  #   - name: jest
  #     run: |
  #       yarn test:jest
  #   - name: depCheck
  #     run: |
  #       yarn depCheck
  #   - name: lint
  #     run: |
  #       yarn lint
  #   - name: types
  #     run: |
  #       yarn tsc
  #   - name: Upload jest coverage
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: jest-coverage
  #       path: jest-coverage/coverage-final.json
  # e2e:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [12.x]
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - name: Cache node modules
  #     uses: actions/cache@v1
  #     with:
  #       path: node_modules
  #       key: ${{ runner.OS }}-build-${{ hashFiles('yarn.lock') }}
  #       restore-keys: |
  #         ${{ runner.OS }}-build-${{ env.cache-name }}-
  #         ${{ runner.OS }}-build-
  #         ${{ runner.OS }}-
  #   - name: install
  #     run: |
  #       yarn --frozen-lockfile
  #       CYPRESS_INSTALL_BINARY= yarn cypress install
  #   - name: build
  #     run: |
  #       yarn build
  #     env:
  #       NODE_ENV: production
  #       TEST_ONLY: 1
  #   - name: Run Cypress
  #     run: |
  #         node testDist/server/server/index.js & npx wait-on http://localhost:9042
  #         yarn e2e:ci --record||(pkill -9 node && exit 1)
  #         pkill -9 node
  #     env:
  #       CYPRESS_RECORD_KEY: 0af1d817-e8ac-4c69-ac15-c0da1e69182d
  #       COMMIT_INFO_BRANCH: ${{ github.head_ref }}
  #       COMMIT_INFO_REMOTE: https://github.com/${{ github.repository }}.git
  #       BASE_URL: http://localhost:9042
  #       NODE_ENV: production
  #       TEST_RUN: 1
  #   - name: Upload cypress coverage
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: cypress-coverage
  #       path: cypress-coverage/coverage-final.json
  # coverage:
    # needs: [node, e2e]
    # runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [12.x]
    # steps:
    # - uses: actions/checkout@v1
    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: ${{ matrix.node-version }}
    # - name: Cache node modules
    #   uses: actions/cache@v1
    #   with:
    #     path: node_modules
    #     key: ${{ runner.OS }}-build-${{ hashFiles('yarn.lock') }}
    #     restore-keys: |
    #       ${{ runner.OS }}-build-${{ env.cache-name }}-
    #       ${{ runner.OS }}-build-
    #       ${{ runner.OS }}-
    # - name: install
    #   run: |
    #     yarn --frozen-lockfile
    # - name: Download jest coverage
    #   uses: actions/download-artifact@v1
    #   with:
    #     name: jest-coverage
    # - name: Download cypress coverage
    #   uses: actions/download-artifact@v1
    #   with:
    #     name: cypress-coverage
    # - name: merge coverage
    #   run: |
    #     yarn coverage:merge
    # - name: coveralls
    #   uses: coverallsapp/github-action@master
    #   with:
    #     github-token: ${{ secrets.github_token }}
    #     path-to-lcov: ./reports/lcov.info
    # - name: codecov
    #   uses: codecov/codecov-action@v1.0.3
    #   with:
    #     token: "0ffea696-ec61-45a5-b163-d59e71c0d36b"
    #     file: ./reports/lcov.info
  # docker:
  #   # if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [12.x]
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - name: Cache node modules
  #     uses: actions/cache@v1
  #     with:
  #       path: node_modules
  #       key: ${{ runner.OS }}-build-${{ hashFiles('yarn.lock') }}
  #       restore-keys: |
  #         ${{ runner.OS }}-build-${{ env.cache-name }}-
  #         ${{ runner.OS }}-build-
  #         ${{ runner.OS }}-
  #   - name: install
  #     run: |
  #       yarn --frozen-lockfile
  #   - name: build
  #     run: |
  #       yarn build
  #     env:
  #       NODE_ENV: production
  #       PROD_ONLY: 1
  #   - name: docker
  #     uses: elgohr/Publish-Docker-Github-Action@master
  #     with:
  #       name: marudor/bahnhofsabfahrten/standalone
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #       registry: docker.pkg.github.com
  #       snapshot: "true"
  deploy-test:
    # needs: [docker]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: 'Deploy'
      uses: 'deliverybot/helm@v1'
      with:
        release: 'bahnhofsabfahrten-test'
        namespace: 'marudor'
        chart: 'app'
        token: '${{ github.token }}'
        values: |
          name: foobar
      env:
        KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
